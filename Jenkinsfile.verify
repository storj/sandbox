pipeline {
    agent {
        docker {
            label 'fast-lane'
            image 'storjlabs/ci:latest'
            alwaysPull true
            args '-u root:root --cap-add SYS_PTRACE -v "/tmp/gomod":/go/pkg/mod -v "/tmp/npm":/npm --tmpfs "/tmp:exec,mode=777"'
        }
    }
    options {
        timeout(time: 40, unit: 'MINUTES')
        skipDefaultCheckout(true)
    }
    stages {
        stage('Checkout') {
            steps {
                // Delete any content left over from a previous run.
                sh "chmod -R 777 ."
                // Bash requires extglob option to support !(.git) syntax,
                // and we don't want to delete .git to have faster clones.
                sh 'bash -O extglob -c "rm -rf !(.git)"'

                checkout scm

                sh 'mkdir -p .build'
                script {
                   webChanged = sh(
                      returnStdout: true,
                      script: 'git diff --name-only  | grep web | wc  -l'
                   )
                }
            }
        }
        stage('Gerrit status') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'gerrit-trigger-ssh', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh './scripts/gerrit-status.sh verify start 0'
                }
            }
        }
        stage('Verify') {
            steps {
                 sh './verify.sh'
            }
        }
        stage('Web') {
            steps {
               script {
                  if (webChanged != '0') {
                     sh './web.sh'
                  }
               }
            }
        }
    }
    post {
                    success {
                        withCredentials([sshUserPrivateKey(credentialsId: 'gerrit-trigger-ssh', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                            sh './scripts/gerrit-status.sh verify success +1'
                        }
                    }
                    failure {
                        withCredentials([sshUserPrivateKey(credentialsId: 'gerrit-trigger-ssh', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                            sh './scripts/gerrit-status.sh verify failure -1'
                        }
                    }

    }
 }
